{"ast":null,"code":"import _toConsumableArray from\"/Users/francisco/Documents/Personal/francismaria.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"/Users/francisco/Documents/Personal/francismaria.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";import React,{useState,useEffect}from'react';import FilterCard from'./FilterCard';import FilterModal from'./FilterModal';import{projectsMap,filtersTypesMap,filtersInfoMap}from'./ProjectFilterDetails';import'./Filter.css';var ALL_PROJECTS_IDXS=[];for(var i=0;i<projectsMap.size;i++){ALL_PROJECTS_IDXS.push(i);}function Filter(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),activeFilters=_useState2[0],setActiveFilters=_useState2[1];var _useState3=useState(ALL_PROJECTS_IDXS),_useState4=_slicedToArray(_useState3,2),filteredProjects=_useState4[0],setFilteredProjects=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),modalVisibility=_useState6[0],setModalVisibility=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),filteringProcess=_useState8[0],setFilteringProcess=_useState8[1];var updateModalVisibility=function updateModalVisibility(){return setModalVisibility(!modalVisibility);};/* \n   * Filter project cards. \n   *\n   * Triggered when activeFilters changes\n   */useEffect(function(){setFilteringProcess(true);var filteredMerged=[];var allFilteredProjects=[];allFilteredProjects=activeFilters.map(function(e){return allFilteredProjects.concat(filtersInfoMap[e].projects);});if(allFilteredProjects.length)// p : previous value (previous array) - will be passed to every iteration - final result\n// c : current value (current array)\n// idea: get the elements of the previous array which are included in the current: this is going to be used in the next iteration.\nfilteredMerged=allFilteredProjects.reduce(function(p,c){return p.filter(function(e){return c.includes(e);});});else{filteredMerged=ALL_PROJECTS_IDXS;// if no filters, all are shown\n}setFilteredProjects(filteredMerged);setFilteringProcess(false);},[activeFilters]);useEffect(function(){},[]);var updateFilters=function updateFilters(filters){return setActiveFilters(_toConsumableArray(filters));};var handleRemoval=function handleRemoval(filters){var arr=activeFilters;setActiveFilters(_toConsumableArray(arr.filter(function(id){return!filters.includes(id);})));};var renderLoadingPanel=function renderLoadingPanel(){return/*#__PURE__*/_jsx(\"div\",{className:\"loadingPanel\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Filtering...\"})});};var renderCards=function renderCards(){return filteredProjects.length?filteredProjects.map(function(idx){return projectsMap.get(idx);}):/*#__PURE__*/_jsx(\"p\",{children:\"No Projects Found\"});};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"section\",{id:\"filter-section\",children:[/*#__PURE__*/_jsx(\"p\",{children:/*#__PURE__*/_jsx(\"strong\",{children:\"Filters:\"})}),/*#__PURE__*/_jsxs(\"div\",{id:\"filtersHolder\",children:[activeFilters.map(function(filterId){return/*#__PURE__*/_jsx(FilterCard,{type:\"FILTER\",id:\"\".concat(filterId,\"-card\"),label:filtersInfoMap[filterId].label,onNewFilter:updateModalVisibility,onRemoval:handleRemoval},\"\".concat(filterId,\"-card\"));}),/*#__PURE__*/_jsx(FilterCard,{type:\"ADD\",id:\"Add\",onNewFilter:updateModalVisibility,onRemoval:handleRemoval},'Add')]}),/*#__PURE__*/_jsx(FilterModal,{activeFilters:activeFilters,filtersInfo:filtersInfoMap,filtersTypes:filtersTypesMap,visible:modalVisibility,onClose:updateModalVisibility,onSubmit:updateFilters})]}),/*#__PURE__*/_jsx(\"section\",{id:\"projects-contents\",children:filteringProcess?renderLoadingPanel():renderCards()})]});}export default Filter;","map":{"version":3,"sources":["/Users/francisco/Documents/Personal/francismaria.github.io/src/luxury/projects/filter/Filter.jsx"],"names":["React","useState","useEffect","FilterCard","FilterModal","projectsMap","filtersTypesMap","filtersInfoMap","ALL_PROJECTS_IDXS","i","size","push","Filter","activeFilters","setActiveFilters","filteredProjects","setFilteredProjects","modalVisibility","setModalVisibility","filteringProcess","setFilteringProcess","updateModalVisibility","filteredMerged","allFilteredProjects","map","e","concat","projects","length","reduce","p","c","filter","includes","updateFilters","filters","handleRemoval","arr","id","renderLoadingPanel","renderCards","idx","get","filterId","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport FilterCard from './FilterCard'\nimport FilterModal from './FilterModal'\nimport { projectsMap, filtersTypesMap, filtersInfoMap } from './ProjectFilterDetails';\nimport './Filter.css'\n\nlet ALL_PROJECTS_IDXS = [];\nfor(let i = 0; i < projectsMap.size; i++) \n  ALL_PROJECTS_IDXS.push(i);\n\nfunction Filter() {\n  const [ activeFilters, setActiveFilters ] = useState([]);\n  const [ filteredProjects, setFilteredProjects ] = useState(ALL_PROJECTS_IDXS);\n  const [ modalVisibility, setModalVisibility ] = useState(false);\n  const [ filteringProcess, setFilteringProcess ] = useState(true);\n\n  const updateModalVisibility = () => setModalVisibility(!modalVisibility);\n\n  /* \n   * Filter project cards. \n   *\n   * Triggered when activeFilters changes\n   */\n  useEffect(() => {\n    setFilteringProcess(true);\n\n    let filteredMerged = [];\n    let allFilteredProjects = [];\n\n    allFilteredProjects = activeFilters\n      .map(e => allFilteredProjects.concat(filtersInfoMap[e].projects));\n\n    if (allFilteredProjects.length) \n      // p : previous value (previous array) - will be passed to every iteration - final result\n      // c : current value (current array)\n      // idea: get the elements of the previous array which are included in the current: this is going to be used in the next iteration.\n      filteredMerged = allFilteredProjects.reduce((p, c) => p.filter(e => c.includes(e)));\n    else {\n      filteredMerged = ALL_PROJECTS_IDXS // if no filters, all are shown\n    }\n\n    setFilteredProjects(filteredMerged);\n    setFilteringProcess(false);\n  }, [activeFilters])\n\n  useEffect(() => {\n\n  }, []);\n\n  const updateFilters = (filters) =>\n    setActiveFilters([...filters]);\n\n  const handleRemoval = (filters) => {\n    let arr = activeFilters;\n    setActiveFilters([...arr.filter(id => !filters.includes(id))]);\n  }\n\n  const renderLoadingPanel = () => (\n    <div className='loadingPanel'>\n      <p>Filtering...</p>\n    </div>\n  );\n\n  const renderCards = () =>  filteredProjects.length ?\n    filteredProjects.map(idx => projectsMap.get(idx))\n    : (\n    <p>No Projects Found</p>\n  );\n\n  return (\n    <>\n      <section id='filter-section'>\n        <p><strong>Filters:</strong></p>\n        <div id='filtersHolder'>\n          {activeFilters.map(filterId => (\n            <FilterCard \n              type='FILTER' \n              key={`${filterId}-card`} \n              id={`${filterId}-card`}\n              label={filtersInfoMap[filterId].label}\n              onNewFilter={updateModalVisibility} \n              onRemoval={handleRemoval}\n            />\n          ))}\n          <FilterCard \n            type='ADD' \n            key='Add' \n            id='Add' \n            onNewFilter={updateModalVisibility} \n            onRemoval={handleRemoval}\n          />\n        </div>\n        <FilterModal\n          activeFilters={activeFilters}\n          filtersInfo={filtersInfoMap}\n          filtersTypes={filtersTypesMap}\n          visible={modalVisibility}\n          onClose={updateModalVisibility}\n          onSubmit={updateFilters}\n        />\n      </section>\n      <section id='projects-contents'>\n        {filteringProcess ? renderLoadingPanel() : renderCards()}\n      </section>\n    </>\n  );\n}\n\nexport default Filter;"]},"metadata":{},"sourceType":"module"}