{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/francisco/Documents/Personal/repo/src/projects/components/filter/Filter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport FilterCard from './FilterCard';\nimport FilterModal from './FilterModal';\nimport { projectsMap, filtersTypesMap } from './ProjectFilterDetails';\nimport './Filter.css';\nlet ALL_PROJECTS_IDXS = [];\n\nfor (let i = 0; i < projectsMap.size; i++) ALL_PROJECTS_IDXS.push(i);\n\nfunction Filter() {\n  _s();\n\n  const [activeFilters, setActiveFilters] = useState([]);\n  const [filteredProjects, setFilteredProjects] = useState(ALL_PROJECTS_IDXS);\n  const [modalVisibility, setModalVisibility] = useState(false);\n  const [filteringProcess, setFilteringProcess] = useState(true);\n\n  const updateModalVisibility = () => setModalVisibility(!modalVisibility); // Triggered when activeFilters changes\n\n\n  useEffect(() => {\n    setFilteringProcess(true);\n    let filteredMerged = [];\n    let allFilteredProjects = [];\n    allFilteredProjects = activeFilters.map(e => allFilteredProjects.concat(filtersInfoMap[e].projects));\n    if (allFilteredProjects.length) // p : previous value (previous array) - will be passed to every iteration - final result\n      // c : current value (current array)\n      // idea: get the elements of the previous array which are included in the current: this is going to be used in the next iteration.\n      filteredMerged = allFilteredProjects.reduce((p, c) => p.filter(e => c.includes(e)));else {\n      filteredMerged = ALL_PROJECTS_IDXS; // if no filters, all are shown\n    }\n    setFilteredProjects(filteredMerged);\n    setFilteringProcess(false);\n  }, [activeFilters]);\n\n  const updateFilters = filters => setActiveFilters([...filters]);\n\n  const handleRemoval = filters => {\n    let arr = activeFilters;\n    setActiveFilters([...arr.filter(id => !filters.includes(id))]);\n  };\n\n  const renderLoadingPanel = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loadingPanel\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Filtering...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n\n  const renderCards = () => filteredProjects.length ? filteredProjects.map(idx => projectsMap.get(idx)) : /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No Projects Found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"filterSection\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Filters:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 12\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"filtersHolder\",\n        children: [activeFilters.map(filterId => /*#__PURE__*/_jsxDEV(FilterCard, {\n          type: \"FILTER\",\n          id: `${filterId}-card`,\n          label: filtersInfoMap[filterId].label,\n          onNewFilter: updateModalVisibility,\n          onRemoval: handleRemoval\n        }, `${filterId}-card`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(FilterCard, {\n          type: \"ADD\",\n          id: \"Add\",\n          onNewFilter: updateModalVisibility,\n          onRemoval: handleRemoval\n        }, 'Add', false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FilterModal, {\n        activeFilters: activeFilters,\n        filtersInfo: filtersInfoMap,\n        filtersTypes: filtersTypesMap,\n        visible: modalVisibility,\n        onClose: updateModalVisibility,\n        onSubmit: updateFilters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"projects-contents\",\n      children: filteringProcess ? renderLoadingPanel() : renderCards()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Filter, \"QZuBqtGZzIkdWt/L8GZbovfw4M8=\");\n\n_c = Filter;\nexport default Filter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Filter\");","map":{"version":3,"sources":["/Users/francisco/Documents/Personal/repo/src/projects/components/filter/Filter.jsx"],"names":["React","useState","useEffect","FilterCard","FilterModal","projectsMap","filtersTypesMap","ALL_PROJECTS_IDXS","i","size","push","Filter","activeFilters","setActiveFilters","filteredProjects","setFilteredProjects","modalVisibility","setModalVisibility","filteringProcess","setFilteringProcess","updateModalVisibility","filteredMerged","allFilteredProjects","map","e","concat","filtersInfoMap","projects","length","reduce","p","c","filter","includes","updateFilters","filters","handleRemoval","arr","id","renderLoadingPanel","renderCards","idx","get","filterId","label"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport FilterCard from './FilterCard'\nimport FilterModal from './FilterModal'\nimport { projectsMap, filtersTypesMap } from './ProjectFilterDetails';\nimport './Filter.css'\n\n\n\n\nlet ALL_PROJECTS_IDXS = [];\nfor(let i = 0; i < projectsMap.size; i++) \n  ALL_PROJECTS_IDXS.push(i);\n\nfunction Filter() {\n  const [ activeFilters, setActiveFilters ] = useState([]);\n  const [ filteredProjects, setFilteredProjects ] = useState(ALL_PROJECTS_IDXS);\n  const [ modalVisibility, setModalVisibility ] = useState(false);\n  const [ filteringProcess, setFilteringProcess ] = useState(true);\n\n  const updateModalVisibility = () => setModalVisibility(!modalVisibility);\n\n  // Triggered when activeFilters changes\n  useEffect(() => {\n    setFilteringProcess(true);\n\n    let filteredMerged = [];\n    let allFilteredProjects = [];\n\n    allFilteredProjects = activeFilters\n      .map(e => allFilteredProjects.concat(filtersInfoMap[e].projects));\n\n    if (allFilteredProjects.length) \n      // p : previous value (previous array) - will be passed to every iteration - final result\n      // c : current value (current array)\n      // idea: get the elements of the previous array which are included in the current: this is going to be used in the next iteration.\n      filteredMerged = allFilteredProjects.reduce((p, c) => p.filter(e => c.includes(e)));\n    else {\n      filteredMerged = ALL_PROJECTS_IDXS // if no filters, all are shown\n    }\n\n    setFilteredProjects(filteredMerged);\n    setFilteringProcess(false);\n  }, [activeFilters])\n\n  const updateFilters = (filters) =>\n    setActiveFilters([...filters]);\n\n  const handleRemoval = (filters) => {\n    let arr = activeFilters;\n    setActiveFilters([...arr.filter(id => !filters.includes(id))]);\n  }\n\n  const renderLoadingPanel = () => (\n    <div className='loadingPanel'>\n      <p>Filtering...</p>\n    </div>\n  );\n\n  const renderCards = () =>  filteredProjects.length ?\n    filteredProjects.map(idx => projectsMap.get(idx))\n    : (\n    <p>No Projects Found</p>\n  );\n\n  return (\n    <>\n      <section id='filterSection'>\n        <p><strong>Filters:</strong></p>\n        <div id='filtersHolder'>\n          {activeFilters.map(filterId => (\n            <FilterCard \n              type='FILTER' \n              key={`${filterId}-card`} \n              id={`${filterId}-card`}\n              label={filtersInfoMap[filterId].label}\n              onNewFilter={updateModalVisibility} \n              onRemoval={handleRemoval}\n            />\n          ))}\n          <FilterCard \n            type='ADD' \n            key='Add' \n            id='Add' \n            onNewFilter={updateModalVisibility} \n            onRemoval={handleRemoval}\n          />\n        </div>\n        <FilterModal\n          activeFilters={activeFilters}\n          filtersInfo={filtersInfoMap}\n          filtersTypes={filtersTypesMap}\n          visible={modalVisibility}\n          onClose={updateModalVisibility}\n          onSubmit={updateFilters}\n        />\n      </section>\n      <section id='projects-contents'>\n        {filteringProcess ? renderLoadingPanel() : renderCards()}\n      </section>\n    </>\n  );\n}\n\nexport default Filter;"]},"metadata":{},"sourceType":"module"}